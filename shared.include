# not a regex, but common anyway
declare -r RED=$(tput setaf 1)
declare -r NORMAL=$(tput sgr0)
# End of Text char
declare -r ETX_CHAR="\x03"

declare -r FIND_DIR="./_XSALGOS/"

declare -r TIME_REGEX="([01][0-9]|2[0-3])[0-5][0-9]"

declare -r DAY_BLANK_REGEX="( [1-9]|[12][0-9]|3[01])"
declare -r MONTH_BLANK_REGEX="( [1-9]|1[012])"
declare -r YEAR_BLANK_REGEX="(20[0-9]{2})"
declare -r DATE_BLANK_REGEX="(${DAY_BLANK_REGEX}\/${MONTH_BLANK_REGEX}\/${YEAR_BLANK_REGEX})"

declare -r YEAR_REGEX="${YEAR_BLANK_REGEX}"
declare -r MONTH_REGEX="${MONTH_BLANK_REGEX// /0}"
declare -r DAY_REGEX="${DAY_BLANK_REGEX// /0}"
declare -r DATE_REGEX="(${YEAR_REGEX}${MONTH_REGEX}${DAY_REGEX})"

declare -r HEADER_REGEX="\*\*\* JOURNEE DU ${DATE_BLANK_REGEX} CALCULATEUR [0-9] \*\*\*( FIX)?"

function msg {
	# $1 is info, err, msg...
	# $2 is the message
	echo -e "[${RED}$1${NORMAL}] $2" > /dev/stderr
}

function info {
	msg "info" "$1"
}

function err {
	msg "error" "$1"
}

function check_header {
	grep -E "^${HEADER_REGEX}$" "$1" > /dev/null
	return $?
}

function gen_header {
	# given date YYYYMMDD
	# FIX: date not checked
	awk '{ year=substr($1,1,4); month=substr($1,5,2); day=substr($1,7,2); gsub(/^0/, " ", month); gsub(/^0/, " ", day); printf("*** JOURNEE DU %s/%s/%s CALCULATEUR 1 *** FIX\n", day, month, year); }'
}

function date_from_path {
	# FIX: check if month and year filled up
	awk "{ year=month=\"\"; n=split(\$0,a,\"/\"); for(i=1; i <= n; i++) { if (a[i] ~ /^${YEAR_REGEX}\$/) year=a[i]; if (a[i] ~ /^${MONTH_REGEX}_?.+\$/) month=substr(a[i],0,2); }  printf(\"%s%s%s %s\n\", year, month, substr(a[n],7,2), \$0); }"
}

function xsalgos_files {
	# returns DATE_YYYYMMDD FILENAME
	find "${FIND_DIR}" -mindepth 2 -type f |
		grep -E "[xX][sS][lL][gG][sS]_[0-9]{2}\.[0-9]{2}(\.[tT][xX][tT])?$" |
		grep -v -E "([xX][sS][cC][dD][sS]2|STATUCE|ZONES)" |
		date_from_path |
		sort
}

